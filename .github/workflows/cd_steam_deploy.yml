name: Streaming Deployment

on: push
jobs:     
    deploy-image:
        name: Deploy the latest image
        runs-on: self-hosted

        steps:
          - name: Checkout Code
            uses: actions/checkout@v4

          - name: Configure AWS Creds
            uses: aws-actions/configure-aws-credentials@v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ secrets.AWS_REGION }}

          - name: Login to ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@v2

          - name: Install aws-cli
            run: sudo apt install awscli -y
          
          - name: Retrieve ECR login credentials
            run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY_URL }}

          - name: Stop old container
            run: docker stop streaming_pipeline || true

          - name: Remove old container
            run: docker rm streaming_pipeline || true

          - name: Remove old image
            run: docker rmi ${{ secrets.AWS_ECR_REGISTRY_URL }}/${{ secrets.AWS_ECR_REPO }}:latest || true
              
          - name: Pull new docker image
            run:  docker pull ${{ secrets.AWS_ECR_REGISTRY_URL }}/${{ secrets.AWS_ECR_REPO }}:latest

          - name: Start the container
            env:
                ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
                ALPACA_API_SECRET: ${{ secrets.ALPACA_API_SECRET }}
                QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
            run: docker run -d -e ALPACA_API_KEY=${ALPACA_API_KEY} -e ALPACA_API_SECRET=${ALPACA_API_SECRET} -e QDRANT_API_KEY=${QDRANT_API_KEY} --name streaming_pipeline ${{ secrets.AWS_ECR_REGISTRY_URL }}/${{ secrets.AWS_ECR_REPO }}:latest
